# Copyright 2019 Intel Corporation

package(default_visibility = ["//visibility:public"])

# load("@rules_foreign_cc//tools/build_defs:cmake.bzl", "cmake_external")

# cmake_external(
#     name = "llvm",
#     additional_tools = select({
#         "@toolchain//:windows_x86_64": ["@com_intel_plaidml_conda_tools_windows//:ninja"],
#         "//conditions:default": ["@com_intel_plaidml_conda_tools_unix//:ninja"],
#     }),
#     cache_entries = select({
#         "@toolchain//:windows_x86_64": {
#             "CMAKE_MAKE_PROGRAM": "$EXT_BUILD_ROOT/external/com_intel_plaidml_conda_tools_windows/env/bin/ninja.exe",
#             "LLVM_ENABLE_LIBEDIT": "OFF",
#             "LLVM_ENABLE_LIBXML2": "OFF",
#             "LLVM_ENABLE_RTTI": "1",
#             "LLVM_ENABLE_TERMINFO": "OFF",
#             "LLVM_TARGETS_TO_BUILD": "X86",
#             "LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN": "ON",
#         },
#         "//conditions:default": {
#             "CMAKE_MAKE_PROGRAM": "$EXT_BUILD_ROOT/external/com_intel_plaidml_conda_tools_unix/env/bin/ninja",
#             "LLVM_ENABLE_LIBEDIT": "OFF",
#             "LLVM_ENABLE_LIBXML2": "OFF",
#             "LLVM_ENABLE_RTTI": "1",
#             "LLVM_ENABLE_TERMINFO": "OFF",
#             "LLVM_TARGETS_TO_BUILD": "X86",
#             "LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN": "ON",
#         },
#     }),
#     cmake_options = ["-GNinja"],
#     lib_source = "@llvm//:all",
#     make_commands = select({
#         "@toolchain//:windows_x86_64": [
#             "$EXT_BUILD_ROOT/external/com_intel_plaidml_conda_tools_windows/env/bin/ninja.exe",
#             "$EXT_BUILD_ROOT/external/com_intel_plaidml_conda_tools_windows/env/bin/ninja.exe install",
#         ],
#         "//conditions:default": [
#             "$EXT_BUILD_ROOT/external/com_intel_plaidml_conda_tools_unix/env/bin/ninja",
#             "$EXT_BUILD_ROOT/external/com_intel_plaidml_conda_tools_unix/env/bin/ninja install",
#         ],
#     }),
#     static_libraries = [
#         "libLLVMAggressiveInstCombine.a",
#         "libLLVMAnalysis.a",
#         "libLLVMAsmParser.a",
#         "libLLVMAsmPrinter.a",
#         "libLLVMBinaryFormat.a",
#         "libLLVMBitReader.a",
#         "libLLVMBitWriter.a",
#         "libLLVMCodeGen.a",
#         "libLLVMCore.a",
#         "libLLVMCoroutines.a",
#         "libLLVMCoverage.a",
#         "libLLVMDebugInfoCodeView.a",
#         "libLLVMDebugInfoDWARF.a",
#         "libLLVMDebugInfoMSF.a",
#         "libLLVMDebugInfoPDB.a",
#         "libLLVMDemangle.a",
#         "libLLVMDlltoolDriver.a",
#         "libLLVMExecutionEngine.a",
#         "libLLVMFuzzMutate.a",
#         "libLLVMGlobalISel.a",
#         "libLLVMInstCombine.a",
#         "libLLVMInstrumentation.a",
#         "libLLVMInterpreter.a",
#         "libLLVMipo.a",
#         "libLLVMIRReader.a",
#         "libLLVMLibDriver.a",
#         "libLLVMLineEditor.a",
#         "libLLVMLinker.a",
#         "libLLVMLTO.a",
#         "libLLVMMC.a",
#         "libLLVMMCA.a",
#         "libLLVMMCDisassembler.a",
#         "libLLVMMCJIT.a",
#         "libLLVMMCParser.a",
#         "libLLVMMIRParser.a",
#         "libLLVMObjCARCOpts.a",
#         "libLLVMObject.a",
#         "libLLVMObjectYAML.a",
#         "libLLVMOption.a",
#         "libLLVMOptRemarks.a",
#         "libLLVMOrcJIT.a",
#         "libLLVMPasses.a",
#         "libLLVMProfileData.a",
#         "libLLVMRuntimeDyld.a",
#         "libLLVMScalarOpts.a",
#         "libLLVMSelectionDAG.a",
#         "libLLVMSupport.a",
#         "libLLVMSymbolize.a",
#         "libLLVMTableGen.a",
#         "libLLVMTarget.a",
#         "libLLVMTextAPI.a",
#         "libLLVMTransformUtils.a",
#         "libLLVMVectorize.a",
#         "libLLVMWindowsManifest.a",
#         "libLLVMX86AsmParser.a",
#         "libLLVMX86AsmPrinter.a",
#         "libLLVMX86CodeGen.a",
#         "libLLVMX86Desc.a",
#         "libLLVMX86Disassembler.a",
#         "libLLVMX86Info.a",
#         "libLLVMX86Utils.a",
#         "libLLVMXRay.a",
#     ],
#     alwayslink = True,
# )
